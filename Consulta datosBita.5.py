{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "36cda7dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\MLRAMIREZ\\AppData\\Local\\Temp\\ipykernel_3400\\2843530976.py:9: DtypeWarning:\n",
      "\n",
      "Columns (3,18,21,22) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Archivo cargado exitosamente.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8051/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x23fea1951d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Librerías necesarias\n",
    "import pandas as pd\n",
    "from dash import Dash, dcc, html, Input, Output\n",
    "import plotly.express as px\n",
    "\n",
    "# Cargar el archivo CSV\n",
    "archivo_csv = \"Datos_Historicos_cuenta_al26032025.csv\"\n",
    "try:\n",
    "    datos = pd.read_csv(archivo_csv)\n",
    "    print(\"Archivo cargado exitosamente.\")\n",
    "except FileNotFoundError:\n",
    "    print(f\"Error: El archivo '{archivo_csv}' no se encontró.\")\n",
    "    exit()\n",
    "\n",
    "# Verificar que las columnas necesarias existan\n",
    "columnas_requeridas = [\"Anio\", \"Categoria_Proyecto\", \"Ciclo\", \"Estado\", \"Tipo_Regimen_Hidrico\", \"Tipo_parcela\", \"Area_total_de_la_parcela(ha)\"]\n",
    "for columna in columnas_requeridas:\n",
    "    if columna not in datos.columns:\n",
    "        raise ValueError(f\"La columna '{columna}' no existe en el archivo CSV.\")\n",
    "\n",
    "# Reemplazar valores nulos con \"NA\" para evitar problemas en los análisis\n",
    "for columna in columnas_requeridas:\n",
    "    datos[columna] = datos[columna].fillna(\"NA\")\n",
    "\n",
    "# Convertir la columna \"Anio\" a tipo numérico (si no lo es) para facilitar el análisis\n",
    "datos[\"Anio\"] = pd.to_numeric(datos[\"Anio\"], errors=\"coerce\")\n",
    "\n",
    "# Convertir \"Area_total_de_la_parcela(ha)\" a numérico y reemplazar valores no válidos con 0\n",
    "datos[\"Area_total_de_la_parcela(ha)\"] = pd.to_numeric(datos[\"Area_total_de_la_parcela(ha)\"], errors=\"coerce\").fillna(0)\n",
    "\n",
    "# Filtrar los datos para incluir solo los años en el rango deseado (2012-2025)\n",
    "datos = datos[(datos[\"Anio\"] >= 2012) & (datos[\"Anio\"] <= 2025)]\n",
    "\n",
    "# Calcular el número de observaciones por combinaciones de columnas clave\n",
    "datos_agrupados = datos.groupby(\n",
    "    [\"Anio\", \"Categoria_Proyecto\", \"Ciclo\", \"Estado\", \"Tipo_Regimen_Hidrico\", \"Tipo_parcela\"]\n",
    ").size().reset_index(name=\"Observaciones\")\n",
    "\n",
    "# Crear la aplicación Dash\n",
    "app = Dash(__name__)\n",
    "\n",
    "#Layout de la aplicación\n",
    "# Layout de la aplicación\n",
    "app.layout = html.Div([\n",
    "    # Encabezado con las imágenes y el título\n",
    "    html.Div([\n",
    "        html.Img(src=\"/assets/cimmyt.png\", style={\"height\": \"100px\", \"marginRight\": \"20px\"}),\n",
    "        html.H1(\"Datos Históricos 2012-marzo2025. Bitácoras Agronómicas\", style={\"textAlign\": \"center\", \"flex\": \"1\"}),\n",
    "        html.Img(src=\"/assets/ea.png\", style={\"height\": \"100px\", \"marginLeft\": \"20px\"})\n",
    "    ], style={\"display\": \"flex\", \"alignItems\": \"center\", \"justifyContent\": \"space-between\", \"padding\": \"10px 20px\"}),\n",
    "\n",
    "    # Contenedor principal con filtros y gráficos\n",
    "    html.Div([\n",
    "        # Gráficos\n",
    "        html.Div([\n",
    "            html.Div(id=\"total-observaciones\", style={\"textAlign\": \"center\", \"marginBottom\": \"10px\", \"fontSize\": \"18px\", \"fontWeight\": \"bold\"}),\n",
    "            dcc.Graph(id=\"grafico-observaciones\", style={\"height\": \"800px\", \"marginBottom\": \"50px\"}),  # Primer gráfico\n",
    "            html.Hr(),  # Línea separadora\n",
    "\n",
    "            html.Div(id=\"total-area\", style={\"textAlign\": \"center\", \"marginBottom\": \"10px\", \"fontSize\": \"18px\", \"fontWeight\": \"bold\"}),\n",
    "            dcc.Graph(id=\"grafico-area-total\", style={\"height\": \"800px\", \"marginBottom\": \"50px\"}),  # Segundo gráfico\n",
    "            html.Hr(),  # Línea separadora\n",
    "\n",
    "            html.Div(id=\"total-parcelas\", style={\"textAlign\": \"center\", \"marginBottom\": \"10px\", \"fontSize\": \"18px\", \"fontWeight\": \"bold\"}),  # Total de parcelas\n",
    "            dcc.Graph(id=\"grafico-parcelas\", style={\"height\": \"800px\"}),  # Cuarto gráfico\n",
    "            html.Hr(),  # Línea separadora\n",
    "\n",
    "            html.Div(id=\"total-productores\", style={\"textAlign\": \"center\", \"marginBottom\": \"10px\", \"fontSize\": \"18px\", \"fontWeight\": \"bold\"}),\n",
    "            dcc.Graph(id=\"grafico-productores\", style={\"height\": \"800px\", \"marginBottom\": \"50px\"}),  # Tercer gráfico\n",
    "            html.Hr(),  # Línea separadora\n",
    "\n",
    "            html.Div(id=\"total-genero\", style={\"textAlign\": \"center\", \"marginBottom\": \"10px\", \"fontSize\": \"18px\", \"fontWeight\": \"bold\"}),  # Total por género\n",
    "            dcc.Graph(id=\"grafico-genero\", style={\"height\": \"800px\"})  # Quinto gráfico\n",
    "        ], style={\"width\": \"80%\", \"padding\": \"20px\"}),\n",
    "\n",
    "# Filtros\n",
    "html.Div([\n",
    "    html.Label(\"Categoría del Proyecto:\"),\n",
    "    dcc.Dropdown(\n",
    "        id=\"categoria-dropdown\",\n",
    "        options=[{\"label\": \"Todos\", \"value\": \"Todos\"}] + [{\"label\": cat, \"value\": cat} for cat in datos_agrupados[\"Categoria_Proyecto\"].unique()],\n",
    "        value=\"Todos\"\n",
    "    ),\n",
    "    html.Label(\"Ciclo:\"),\n",
    "    dcc.Dropdown(\n",
    "        id=\"ciclo-dropdown\",\n",
    "        options=[{\"label\": \"Todos\", \"value\": \"Todos\"}] + [{\"label\": ciclo, \"value\": ciclo} for ciclo in datos_agrupados[\"Ciclo\"].unique()],\n",
    "        value=\"Todos\"\n",
    "    ),\n",
    "    html.Label(\"Tipo de Parcela:\"),\n",
    "    dcc.Dropdown(\n",
    "        id=\"tipo-parcela-dropdown\",\n",
    "        options=[{\"label\": \"Todos\", \"value\": \"Todos\"}] + [{\"label\": tipo, \"value\": tipo} for tipo in datos_agrupados[\"Tipo_parcela\"].unique()],\n",
    "        value=\"Todos\"\n",
    "    ),\n",
    "    html.Label(\"Estado:\"),\n",
    "    dcc.Dropdown(\n",
    "        id=\"estado-dropdown\",\n",
    "        options=[{\"label\": \"Todos\", \"value\": \"Todos\"}] + [{\"label\": estado, \"value\": estado} for estado in datos_agrupados[\"Estado\"].unique()],\n",
    "        value=\"Todos\"\n",
    "    ),\n",
    "    html.Label(\"Régimen Hídrico:\"),\n",
    "    dcc.Dropdown(\n",
    "        id=\"regimen-dropdown\",\n",
    "        options=[{\"label\": \"Todos\", \"value\": \"Todos\"}] + [{\"label\": regimen, \"value\": regimen} for regimen in datos_agrupados[\"Tipo_Regimen_Hidrico\"].unique()],\n",
    "        value=\"Todos\"\n",
    "    )\n",
    "], className=\"filters-container\", style={\n",
    "    \"width\": \"15%\",  # Ancho del contenedor\n",
    "    \"padding\": \"10px 10px 0px 10px\",  # Espaciado interno reducido (sin padding inferior)\n",
    "    \"borderLeft\": \"1px solid #ccc\",  # Borde izquierdo\n",
    "    \"position\": \"sticky\",  # Hace que el contenedor sea visible al desplazarse\n",
    "    \"top\": \"0\",  # Mantiene el contenedor visible desde la parte superior\n",
    "    \"backgroundColor\": \"white\",  # Fondo blanco\n",
    "    \"zIndex\": \"1000\",  # Asegura que esté por encima de otros elementos\n",
    "    \"overflowY\": \"auto\",  # Habilita el scroll interno si el contenido excede la altura\n",
    "    \"height\": \"auto\",  # Ajusta la altura automáticamente al contenido\n",
    "    \"textAlign\": \"center\"  # Centra el contenido dentro del contenedor\n",
    "})\n",
    "    ], style={\"display\": \"flex\", \"flexDirection\": \"row\", \"height\": \"100%\", \"margin\": \"0 50px\"})\n",
    "])\n",
    "# Callback para actualizar el gráfico y el total de observaciones\n",
    "@app.callback(\n",
    "    [Output(\"grafico-observaciones\", \"figure\"), Output(\"total-observaciones\", \"children\")],\n",
    "    [Input(\"categoria-dropdown\", \"value\"), Input(\"ciclo-dropdown\", \"value\"), Input(\"tipo-parcela-dropdown\", \"value\"),\n",
    "     Input(\"estado-dropdown\", \"value\"), Input(\"regimen-dropdown\", \"value\")]\n",
    ")\n",
    "def actualizar_grafico_y_total(categoria, ciclo, tipo_parcela, estado, regimen):\n",
    "    datos_filtrados = datos_agrupados.copy()\n",
    "    if categoria != \"Todos\":\n",
    "        datos_filtrados = datos_filtrados[datos_filtrados[\"Categoria_Proyecto\"] == categoria]\n",
    "    if ciclo != \"Todos\":\n",
    "        datos_filtrados = datos_filtrados[datos_filtrados[\"Ciclo\"] == ciclo]\n",
    "    if tipo_parcela != \"Todos\":\n",
    "        datos_filtrados = datos_filtrados[datos_filtrados[\"Tipo_parcela\"] == tipo_parcela]\n",
    "    if estado != \"Todos\":\n",
    "        datos_filtrados = datos_filtrados[datos_filtrados[\"Estado\"] == estado]\n",
    "    if regimen != \"Todos\":\n",
    "        datos_filtrados = datos_filtrados[datos_filtrados[\"Tipo_Regimen_Hidrico\"] == regimen]\n",
    "\n",
    "    datos_agrupados_filtrados = datos_filtrados.groupby(\"Anio\")[\"Observaciones\"].sum().reset_index()\n",
    "\n",
    "    fig = px.bar(datos_agrupados_filtrados, x=\"Anio\", y=\"Observaciones\", title=\"Número de Bitácoras por Año\")\n",
    "    \n",
    "    fig.update_layout(\n",
    "        title={\n",
    "            \"text\": \"Número de Bitácoras por Año\",\n",
    "            \"font\": {\"size\": 24},  # Cambia el tamaño del título aquí\n",
    "            \"x\": 0.1  \n",
    "        }\n",
    "    )\n",
    "    \n",
    "    total_observaciones = datos_filtrados[\"Observaciones\"].sum()\n",
    "    return fig, f\"Total de Bitácoras: {total_observaciones}\"\n",
    "\n",
    "# Callback para actualizar el gráfico y el total del área\n",
    "@app.callback(\n",
    "    [Output(\"grafico-area-total\", \"figure\"), Output(\"total-area\", \"children\")],\n",
    "    [Input(\"categoria-dropdown\", \"value\"), Input(\"ciclo-dropdown\", \"value\"), Input(\"tipo-parcela-dropdown\", \"value\"),\n",
    "     Input(\"estado-dropdown\", \"value\"), Input(\"regimen-dropdown\", \"value\")]\n",
    ")\n",
    "def actualizar_grafico_area(categoria, ciclo, tipo_parcela, estado, regimen):\n",
    "    datos_filtrados = datos.copy()\n",
    "    if categoria != \"Todos\":\n",
    "        datos_filtrados = datos_filtrados[datos_filtrados[\"Categoria_Proyecto\"] == categoria]\n",
    "    if ciclo != \"Todos\":\n",
    "        datos_filtrados = datos_filtrados[datos_filtrados[\"Ciclo\"] == ciclo]\n",
    "    if tipo_parcela != \"Todos\":\n",
    "        datos_filtrados = datos_filtrados[datos_filtrados[\"Tipo_parcela\"] == tipo_parcela]\n",
    "    if estado != \"Todos\":\n",
    "        datos_filtrados = datos_filtrados[datos_filtrados[\"Estado\"] == estado]\n",
    "    if regimen != \"Todos\":\n",
    "        datos_filtrados = datos_filtrados[datos_filtrados[\"Tipo_Regimen_Hidrico\"] == regimen]\n",
    "\n",
    "    datos_agrupados_area = datos_filtrados.groupby(\"Anio\")[\"Area_total_de_la_parcela(ha)\"].sum().reset_index()\n",
    "    fig = px.bar(\n",
    "        datos_agrupados_area,\n",
    "        x=\"Anio\",\n",
    "        y=\"Area_total_de_la_parcela(ha)\",\n",
    "        title=\"Superficie (ha) de las Parcelas por Año\",\n",
    "        labels={\"Area_total_de_la_parcela(ha)\": \"Área (ha)\"}  # Cambiar etiqueta del eje y\n",
    "    )\n",
    "       # Cambiar el tamaño del título\n",
    "    fig.update_layout(\n",
    "        title={\n",
    "            \"text\": \"Superficie (ha) de las Parcelas por Año\",\n",
    "            \"font\": {\"size\": 24},  # Cambia el tamaño del título aquí\n",
    "            \"x\": 0.1  # Centra el título horizontalmente\n",
    "        }\n",
    "    )\n",
    "    \n",
    "    total_area = datos_filtrados[\"Area_total_de_la_parcela(ha)\"].sum()\n",
    "    return fig, f\"Total de Área (ha): {total_area:.2f}\"\n",
    "\n",
    "# Callback para actualizar el gráfico y el total de valores únicos de Id_Parcela(Unico)\n",
    "@app.callback(\n",
    "    [Output(\"grafico-parcelas\", \"figure\"), Output(\"total-parcelas\", \"children\")],\n",
    "    [Input(\"categoria-dropdown\", \"value\"), Input(\"ciclo-dropdown\", \"value\"), Input(\"tipo-parcela-dropdown\", \"value\"),\n",
    "     Input(\"estado-dropdown\", \"value\"), Input(\"regimen-dropdown\", \"value\")]\n",
    ")\n",
    "def actualizar_grafico_parcelas(categoria, ciclo, tipo_parcela, estado, regimen):\n",
    "    datos_filtrados = datos.copy()\n",
    "    if categoria != \"Todos\":\n",
    "        datos_filtrados = datos_filtrados[datos_filtrados[\"Categoria_Proyecto\"] == categoria]\n",
    "    if ciclo != \"Todos\":\n",
    "        datos_filtrados = datos_filtrados[datos_filtrados[\"Ciclo\"] == ciclo]\n",
    "    if tipo_parcela != \"Todos\":\n",
    "        datos_filtrados = datos_filtrados[datos_filtrados[\"Tipo_parcela\"] == tipo_parcela]\n",
    "    if estado != \"Todos\":\n",
    "        datos_filtrados = datos_filtrados[datos_filtrados[\"Estado\"] == estado]\n",
    "    if regimen != \"Todos\":\n",
    "        datos_filtrados = datos_filtrados[datos_filtrados[\"Tipo_Regimen_Hidrico\"] == regimen]\n",
    "\n",
    "    # Calcular valores únicos de Id_Parcela(Unico) por año\n",
    "    datos_agrupados_parcelas = datos_filtrados.groupby(\"Anio\")[\"Id_Parcela(Unico)\"].nunique().reset_index()\n",
    "    fig = px.bar(\n",
    "        datos_agrupados_parcelas,\n",
    "        x=\"Anio\",\n",
    "        y=\"Id_Parcela(Unico)\",\n",
    "        title=\"Número de Parcelas por Año\",\n",
    "        labels={\"Id_Parcela(Unico)\": \"Parcelas\"}\n",
    "    )\n",
    "\n",
    "    # Cambiar el tamaño del título\n",
    "    fig.update_layout(\n",
    "        title={\n",
    "            \"text\": \"Número de Parcelas por Año\",\n",
    "            \"font\": {\"size\": 24},  # Cambia el tamaño del título aquí\n",
    "            \"x\": 0.1  # Centra el título horizontalmente\n",
    "        }\n",
    "    )\n",
    "    total_parcelas = datos_filtrados[\"Id_Parcela(Unico)\"].nunique()\n",
    "    return fig, f\"Total de Parcelas: {total_parcelas}\"\n",
    "\n",
    "# Callback para actualizar el gráfico y el total de valores únicos de Id_Productor\n",
    "@app.callback(\n",
    "    [Output(\"grafico-productores\", \"figure\"), Output(\"total-productores\", \"children\")],\n",
    "    [Input(\"categoria-dropdown\", \"value\"), Input(\"ciclo-dropdown\", \"value\"), Input(\"tipo-parcela-dropdown\", \"value\"),\n",
    "     Input(\"estado-dropdown\", \"value\"), Input(\"regimen-dropdown\", \"value\")]\n",
    ")\n",
    "def actualizar_grafico_productores(categoria, ciclo, tipo_parcela, estado, regimen):\n",
    "    datos_filtrados = datos.copy()\n",
    "    if categoria != \"Todos\":\n",
    "        datos_filtrados = datos_filtrados[datos_filtrados[\"Categoria_Proyecto\"] == categoria]\n",
    "    if ciclo != \"Todos\":\n",
    "        datos_filtrados = datos_filtrados[datos_filtrados[\"Ciclo\"] == ciclo]\n",
    "    if tipo_parcela != \"Todos\":\n",
    "        datos_filtrados = datos_filtrados[datos_filtrados[\"Tipo_parcela\"] == tipo_parcela]\n",
    "    if estado != \"Todos\":\n",
    "        datos_filtrados = datos_filtrados[datos_filtrados[\"Estado\"] == estado]\n",
    "    if regimen != \"Todos\":\n",
    "        datos_filtrados = datos_filtrados[datos_filtrados[\"Tipo_Regimen_Hidrico\"] == regimen]\n",
    "\n",
    "    # Calcular valores únicos de Id_Productor por año\n",
    "    datos_agrupados_productores = datos_filtrados.groupby(\"Anio\")[\"Id_Productor\"].nunique().reset_index()\n",
    "    fig = px.bar(\n",
    "        datos_agrupados_productores,\n",
    "        x=\"Anio\",\n",
    "        y=\"Id_Productor\",\n",
    "        title=\"Número de Productores por Año.\",\n",
    "        labels={\"Id_Productor\": \"Productores\"}\n",
    "    )\n",
    "    # Cambiar el tamaño del título\n",
    "    fig.update_layout(\n",
    "        title={\n",
    "            \"text\": \"Número de Productores por Año\",\n",
    "            \"font\": {\"size\": 24},  # Cambia el tamaño del título aquí\n",
    "            \"x\": 0.1  # Centra el título horizontalmente\n",
    "        }\n",
    "    )\n",
    "\n",
    "    total_productores = datos_filtrados[\"Id_Productor\"].nunique()\n",
    "    return fig, f\"Total de Productores: {total_productores}\"\n",
    "\n",
    "\n",
    "\n",
    "# Callback para actualizar la gráfica de género\n",
    "@app.callback(\n",
    "    Output(\"grafico-genero\", \"figure\"),\n",
    "    [Input(\"categoria-dropdown\", \"value\"), Input(\"ciclo-dropdown\", \"value\"), Input(\"tipo-parcela-dropdown\", \"value\"),\n",
    "     Input(\"estado-dropdown\", \"value\"), Input(\"regimen-dropdown\", \"value\")]\n",
    ")\n",
    "def actualizar_grafico_genero(categoria, ciclo, tipo_parcela, estado, regimen):\n",
    "    datos_filtrados = datos.copy()\n",
    "    if categoria != \"Todos\":\n",
    "        datos_filtrados = datos_filtrados[datos_filtrados[\"Categoria_Proyecto\"] == categoria]\n",
    "    if ciclo != \"Todos\":\n",
    "        datos_filtrados = datos_filtrados[datos_filtrados[\"Ciclo\"] == ciclo]\n",
    "    if tipo_parcela != \"Todos\":\n",
    "        datos_filtrados = datos_filtrados[datos_filtrados[\"Tipo_parcela\"] == tipo_parcela]\n",
    "    if estado != \"Todos\":\n",
    "        datos_filtrados = datos_filtrados[datos_filtrados[\"Estado\"] == estado]\n",
    "    if regimen != \"Todos\":\n",
    "        datos_filtrados = datos_filtrados[datos_filtrados[\"Tipo_Regimen_Hidrico\"] == regimen]\n",
    "\n",
    "    # Calcular el porcentaje por género\n",
    "    if \"Genero\" not in datos_filtrados.columns:\n",
    "        return {}\n",
    "\n",
    "    datos_genero = datos_filtrados.groupby(\"Genero\").size().reset_index(name=\"Registros\")\n",
    "    datos_genero[\"Porcentaje\"] = (datos_genero[\"Registros\"] / datos_genero[\"Registros\"].sum()) * 100\n",
    "\n",
    "    # Definir colores fijos para cada género\n",
    "    colores_fijos = {\n",
    "        \"Masculino\": \"#2ca02c\",\n",
    "        \"Femenino\": \"#ff7f0e\",\n",
    "        \"NA..\": \"#D3D3D3\"\n",
    "    }\n",
    "\n",
    "    # Crear la gráfica\n",
    "    fig = px.pie(\n",
    "        datos_genero,\n",
    "        names=\"Genero\",\n",
    "        values=\"Porcentaje\",\n",
    "        title=\"Distribución (%) por Género de Productores(as)\",\n",
    "        labels={\"Genero\": \"Género\", \"Porcentaje\": \"Porcentaje\"}\n",
    "    )\n",
    "    # Cambiar el tamaño del título\n",
    "    fig.update_layout(\n",
    "        title={\n",
    "            \"text\": \"Distribución (%) por Género de Productores(as)\",\n",
    "            \"font\": {\"size\": 24},  # Cambia el tamaño del título aquí\n",
    "            \"x\": 0.1  # Centra el título horizontalmente\n",
    "        }\n",
    "    )\n",
    "    # Aplicar los colores fijos\n",
    "    fig.update_traces(marker=dict(colors=[colores_fijos.get(genero, \"#7f7f7f\") for genero in datos_genero[\"Genero\"]]))\n",
    "\n",
    "    return fig\n",
    "# Ejecutar la aplicación\n",
    "if __name__ == \"__main__\":\n",
    "    app.run(debug=True, port=8051)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
